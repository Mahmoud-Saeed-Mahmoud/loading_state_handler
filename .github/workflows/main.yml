name: Publish Release

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Flutter
        uses: subosito/flutter-action@v2.14.0
        
      - name: Read Pubspec Version
        id: get_version
        run: |
          VERSION=$(grep 'version:' pubspec.yaml | awk '{print $2}')
          VERSION=${VERSION//\'/} # Remove quotes
          echo "::set-output name=version::$VERSION"

      - name: Read Changelog
        id: get_changelog
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          START_TAG="## $VERSION"
          END_TAG="## "

          # Find the line containing the version
          START_LINE=$(grep -n "$START_TAG" CHANGELOG.md | head -n 1 | cut -d: -f1)

          if [[ -z "$START_LINE" ]]; then
            echo "::error::Changelog section for version '$VERSION' not found in CHANGELOG.md"
            exit 1
          fi

          # Find the next section heading, or use end of file
          END_LINE=$(grep -n "$END_TAG" CHANGELOG.md | grep -A 1 -m 1 "$START_TAG" | tail -n 1 | cut -d: -f1)

          if [[ -z "$END_LINE" ]]; then
            END_LINE=$(wc -l < CHANGELOG.md)
          fi
        
          echo "start line is $START_LINE and end line is $END_LINE"

          # Extract all lines between the start and end markers
          NOTES=$(sed -n "${START_LINE},${END_LINE}p" CHANGELOG.md | tail -n +2 | tr -d '\r')

          echo "::set-output name=notes::$NOTES"

      - name: Create Git Tag
        run: |
          git tag "v${{ steps.get_version.outputs.version }}"
          echo "TAG created"

      - name: Push Tag
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tags: true
          force: true

      - name: Create GitHub Release (Optional)
        uses: actions/create-release@v1
        if: ${{ github.ref == 'refs/heads/main' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          release_name: v${{ steps.get_version.outputs.version }}
          body: ${{ steps.get_changelog.outputs.notes }}
          draft: false
          prerelease: false

  publish:
    permissions:
      id-token: write # Required for authentication using OIDC
    runs-on: ubuntu-latest
    needs: release  # Ensure this job runs after the 'release' job
    if: ${{needs.release.result == 'success'}}
    steps:
      - uses: actions/checkout@v3
      - uses: subosito/flutter-action@v2.14.0
      - uses: dart-lang/setup-dart@v1
      - name: Install dependencies
        run: dart pub get
      # Here you can insert custom steps you need
      # - run: dart tool/generate-code.dart
      - name: Publish
        run: dart pub publish --force

  
  check_publish_status:
      needs: publish
      runs-on: ubuntu-latest
      if: always() # Run even if 'publish' job fails
      steps:
        - name: Check Publish Status
          run: |
           if ${{ needs.publish.result }} == 'success'; then
              echo "The publish job completed successfully!"
           else
              echo "The publish job failed."
              exit 1
           fi
